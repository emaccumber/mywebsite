---
const currentPath = Astro.url.pathname;
---

<nav>
  <div class="nav-container">
    <button class="hamburger" id="hamburger" aria-label="Menu">
      <span></span>
      <span></span>
      <span></span>
    </button>
    <a href="/" class="site-name">Ethan MacCumber</a>
    <ul class="nav-links" id="navLinks">
      <li><a href="/photographs" class:list={["nav-link", { active: currentPath === '/photographs/' }]}>photographs</a></li>
      <li><a href="/films" class:list={["nav-link", { active: currentPath === '/films/' }]}>films</a></li>
      <li><a href="/writing" class:list={["nav-link", { active: currentPath === '/writing/' }]}>writing</a></li>
      <li><a href="/information" class:list={["nav-link", { active: currentPath === '/information/' }]}>information</a></li>
      <li><button id="themeToggle" class="theme-toggle nav-link">dark</button></li>
    </ul>
  </div>
</nav>

<style>
  nav {
    padding: 1rem 1.5rem;
    position: relative;
    z-index: 100;
    background: white;
    transition: background-color 0.3s ease;
  }

  html.dark nav {
    background: #0a0a0a;
  }

  .nav-container {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }

  .site-name {
    font-size: 1.2rem;
    font-weight: 400;
    text-decoration: none;
    color: #666;
    transition: color 0.2s;
  }

  .site-name:hover {
    color: #000;
  }

  html.dark .site-name {
    color: #ccc;
  }

  html.dark .site-name:hover {
    color: #fff;
  }

  .nav-links {
    display: flex;
    gap: 1.2rem;
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .nav-link {
    text-decoration: none;
    color: #666;
    transition: color 0.2s;
    font-size: 1rem;
  }

  .nav-link:hover {
    color: #000;
  }

  .nav-link.active {
    color: #000;
    font-weight: 500;
  }

  html.dark .nav-link {
    color: #ccc;
  }

  html.dark .nav-link:hover {
    color: #fff;
  }

  html.dark .nav-link.active {
    color: #fff;
  }

  .theme-toggle {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
    margin: 0;
    vertical-align: baseline;
    line-height: inherit;
    width: 2.5rem;
    text-align: left;
  }

  /* Hamburger menu styles */
  .hamburger {
    display: none;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
    width: 24px;
    height: 24px;
    position: relative;
    z-index: 1001;
  }

  .hamburger span {
    display: block;
    width: 24px;
    height: 2px;
    background: #666;
    position: absolute;
    left: 0;
    transition: all 0.3s ease;
  }

  html.dark .hamburger span {
    background: #ccc;
  }

  .hamburger span:nth-child(1) {
    top: 4px;
  }

  .hamburger span:nth-child(2) {
    top: 11px;
  }

  .hamburger span:nth-child(3) {
    bottom: 4px;
  }

  .hamburger.active span:nth-child(1) {
    transform: rotate(45deg);
    top: 11px;
  }

  .hamburger.active span:nth-child(2) {
    opacity: 0;
  }

  .hamburger.active span:nth-child(3) {
    transform: rotate(-45deg);
    bottom: 11px;
  }

  /* Mobile styles */
  @media (max-width: 768px) {
    nav {
      padding: 1rem 1.5rem;
    }

    .nav-container {
      flex-wrap: wrap;
      justify-content: flex-start;
    }

    .hamburger {
      display: block;
    }

    .nav-links {
      position: static;
      width: 100%;
      flex-direction: column;
      align-items: flex-start;
      gap: 0;
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease, margin 0.3s ease;
      margin: 0;
      padding: 0;
      list-style: none;
    }

    .nav-links.open {
      max-height: 400px;
      margin-top: 0.5rem;
      margin-bottom: 0.5rem;
    }

    .nav-links li {
      margin-bottom: 0.5rem;
      width: auto;
      text-align: left;
    }

    .nav-links li:last-child {
      margin-bottom: 0;
    }

    .nav-link,
    .theme-toggle {
      font-size: 1rem;
      width: auto;
    }
  }
</style>

<script>
  function updateToggleText() {
    const toggle = document.getElementById('themeToggle');
    if (toggle) {
      const isDark = document.documentElement.classList.contains('dark');
      toggle.textContent = isDark ? 'light' : 'dark';
    }
  }

  function toggleTheme() {
    const isDark = document.documentElement.classList.contains('dark');
    const newTheme = isDark ? 'light' : 'dark';
    
    document.documentElement.classList.toggle('dark', newTheme === 'dark');
    localStorage.setItem('theme', newTheme);
    updateToggleText();
  }

  // Initialize toggle text and add click listener
  document.addEventListener('DOMContentLoaded', () => {
    updateToggleText();
    
    const toggle = document.getElementById('themeToggle');
    if (toggle) {
      toggle.addEventListener('click', toggleTheme);
    }

    // Hamburger menu functionality
    const hamburger = document.getElementById('hamburger');
    const navLinks = document.getElementById('navLinks');
    
    if (hamburger && navLinks) {
      hamburger.addEventListener('click', () => {
        hamburger.classList.toggle('active');
        navLinks.classList.toggle('open');
      });

      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!hamburger.contains(e.target) && !navLinks.contains(e.target)) {
          hamburger.classList.remove('active');
          navLinks.classList.remove('open');
        }
      });

      // Close menu when clicking a link
      const links = navLinks.querySelectorAll('a');
      links.forEach(link => {
        link.addEventListener('click', () => {
          hamburger.classList.remove('active');
          navLinks.classList.remove('open');
        });
      });
    }
  });

  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    if (!localStorage.getItem('theme')) {
      const theme = e.matches ? 'dark' : 'light';
      document.documentElement.classList.toggle('dark', theme === 'dark');
      updateToggleText();
    }
  });
</script>