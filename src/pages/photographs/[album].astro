---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { Image } from 'astro:assets';
import { albums } from '../../data/albums.js';

export async function getStaticPaths() {
  return albums.map(album => ({
    params: { album: album.slug },
    props: {
      albumName: album.slug,
      displayName: album.name,
      totalPhotos: album.photos.length,
      photos: album.photos,
      albumDescription: album.albumDescription
    }
  }));
}

const { albumName, displayName, totalPhotos, photos, albumDescription } = Astro.props;
const baseUrl = `https://f004.backblazeb2.com/file/ethan-site-media/images/photographs/${albumName}`;

// Preload first few images for better performance
const preloadImages = [1, 2, 3].map(i => `${baseUrl}/${i}.jpg`);
---

<BaseLayout title={`${displayName} - Photographs`}>
  {/* Preload first few images */}
  {preloadImages.map(src => (
    <link rel="preload" as="image" href={src} slot="head" />
  ))}
  
  <div class="album-container">
    <div class="photo-viewer">
      <img 
        id="current-photo" 
        src={`${baseUrl}/1.jpg`}
        alt={`${displayName} - Photo 1`}
        data-current="1"
        loading="eager"
        decoding="async"
      />
      <div class="caption" id="photo-caption">{photos[0]?.caption || ''}</div>
    </div>
    
    <nav class="photo-nav">
      <button id="prev-btn" class="nav-btn disabled" aria-label="Previous photo">
        &lt;
      </button>
      <button id="next-btn" class="nav-btn" aria-label="Next photo">
        &gt;
      </button>
    </nav>

    {albumDescription && (
      <div class="album-description">
        <p>{albumDescription}</p>
      </div>
    )}
  </div>
</BaseLayout>

<style>
  .album-container {
    min-height: calc(100vh - 120px);
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 2rem 1rem;
  }

  .photo-viewer {
    width: 100%;
    max-width: 1200px;
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
  }

  #current-photo {
    max-width: 100%;
    max-height: 70vh;
    width: auto;
    height: auto;
    cursor: default;
    user-select: none;
  }

  .caption {
    position: absolute;
    bottom: -1.4rem;
    right: 0;
    font-size: var(--font-sm);
    color: var(--text-secondary);
    min-height: 1rem;
  }

  .photo-nav {
    position: fixed;
    bottom: 1rem;
    left: 0;
    right: 0;
    display: flex;
    justify-content: space-between;
    padding: 0 1rem;
    pointer-events: none;
    z-index: 10;
  }

  .nav-btn {
    position: relative;
    background: none;
    border: none;
    font-family: 'Inter', sans-serif;
    font-size: var(--font-2xl);
    font-weight: 200;
    color: var(--link-color);
    cursor: pointer;
    padding: 0.5rem;
    transition: color 0.2s;
    pointer-events: auto;
  }

  /* Extend clickable area vertically */
  .nav-btn::before {
    content: '';
    position: fixed;
    width: 100px;
    top: 80px; /* Leave space for navigation menu */
    bottom: 0;
    cursor: pointer;
  }

  #prev-btn::before {
    left: 0;
  }

  #next-btn::before {
    right: 0;
  }

  .nav-btn:hover:not(.disabled) {
    color: var(--link-hover);
  }

  .nav-btn.disabled {
    color: var(--text-secondary);
    cursor: default;
    opacity: 0.5;
  }

  .nav-btn.disabled::before {
    cursor: default;
  }

  :global([data-theme="dark"]) .nav-btn.disabled {
    color: #444;
  }

  .album-description {
    max-width: 800px;
    margin-top: 3rem;
    text-align: center;
    color: var(--text-secondary);
  }

  @media (max-width: 768px) {
    .photo-nav {
      padding: 0 0.5rem;
    }
    
    .nav-btn {
      font-size: var(--font-xl);
      padding: 0.25rem;
    }
  }
</style>

<script define:vars={{ baseUrl, totalPhotos, photos }}>
  document.addEventListener('DOMContentLoaded', () => {
    const img = document.getElementById('current-photo');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const caption = document.getElementById('photo-caption');
    let currentIndex = 1;
    const preloadedImages = new Set();

    // Preload an image
    function preloadImage(index) {
      if (index > 0 && index <= totalPhotos && !preloadedImages.has(index)) {
        const img = new Image();
        img.src = `${baseUrl}/${index}.jpg`;
        preloadedImages.add(index);
      }
    }

    // Preload adjacent images
    function preloadAdjacent(index) {
      preloadImage(index - 1);
      preloadImage(index + 1);
    }

    function updatePhoto(index) {
      if (index < 1 || index > totalPhotos) return;
      
      currentIndex = index;
      img.src = `${baseUrl}/${index}.jpg`;
      img.alt = `Photo ${index}`;
      img.dataset.current = index.toString();
      
      // Update caption
      const photoCaption = photos[index - 1]?.caption || '';
      caption.textContent = photoCaption;
      
      // Update button states
      if (index === 1) {
        prevBtn.classList.add('disabled');
      } else {
        prevBtn.classList.remove('disabled');
      }
      
      if (index === totalPhotos) {
        nextBtn.classList.add('disabled');
      } else {
        nextBtn.classList.remove('disabled');
      }
      
      // Preload adjacent images
      preloadAdjacent(index);
    }

    function positionCaption() {
      const imgRect = img.getBoundingClientRect();
      const viewerRect = img.parentElement.getBoundingClientRect();
      
      // Calculate the right position of the actual image within the container
      const rightOffset = viewerRect.right - imgRect.right;
      caption.style.right = rightOffset + 'px';
    }

    // Position caption after image loads
    img.addEventListener('load', positionCaption);
    window.addEventListener('resize', positionCaption);
    
    // Initial positioning
    if (img.complete) {
      positionCaption();
    }
    
    // Preload first few images on load
    preloadAdjacent(1);

    // Button navigation
    prevBtn.addEventListener('click', () => {
      if (currentIndex > 1) {
        updatePhoto(currentIndex - 1);
      }
    });

    nextBtn.addEventListener('click', () => {
      if (currentIndex < totalPhotos) {
        updatePhoto(currentIndex + 1);
      }
    });


    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft' && currentIndex > 1) {
        updatePhoto(currentIndex - 1);
      } else if (e.key === 'ArrowRight' && currentIndex < totalPhotos) {
        updatePhoto(currentIndex + 1);
      }
    });
  });
</script>